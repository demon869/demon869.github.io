<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demon</title>
  
  
  <link href="https://www.demon-w.com/atom.xml" rel="self"/>
  
  <link href="https://www.demon-w.com/"/>
  <updated>2020-08-14T16:26:20.544Z</updated>
  <id>https://www.demon-w.com/</id>
  
  <author>
    <name>Demon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 文件管理</title>
    <link href="https://www.demon-w.com/2018/01/02/Linux%E5%9F%BA%E7%A1%80/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>https://www.demon-w.com/2018/01/02/Linux%E5%9F%BA%E7%A1%80/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2018-01-02T14:00:22.000Z</published>
    <updated>2020-08-14T16:26:20.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件管理概述"><a href="#文件管理概述" class="headerlink" title="文件管理概述"></a>文件管理概述</h2><blockquote><p>说到Linux文件管理，首先我们需要了解的就是，我们要对文件做些什么事情？其实无非就是对一个文件进行、创建、复制、移动、查看、编辑、压缩、查找、删除、等等，例如: 当我们想修改系统的主机名称，是否应该知道文件在哪，才能去做对应的修改？</p></blockquote><h2 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h2><blockquote><p>计算机操作系统都是使用目录结构组织文件，具体来说就是在一个目录中存放子目录和文件，而在子目录中又会进一步存放子目录和文件，以此类推形成一个树状的文件结构，由于其结构很像一棵树的分支， 所以该结构又被称为”目录树“。Windows: 以多根的方式组织文件 C:\ D:\ ，Linux: 以单根的方式组织文件，如下图为Centos7的目录结构<br><img src= "https://cdn.jsdelivr.net/gh/demon869/HexoStaticFile@1.0.1/source/img/loading.gif" data-lazy-src="https://www.demon-w.com/2018/01/02/Linux%E5%9F%BA%E7%A1%80/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/1.jpg" alt="1"></p></blockquote>]]></content>
    
    
    <summary type="html">Linux 文件管理</summary>
    
    
    
    <category term="Linux基础" scheme="https://www.demon-w.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux基础" scheme="https://www.demon-w.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统命令行入门</title>
    <link href="https://www.demon-w.com/2018/01/01/Linux%E5%9F%BA%E7%A1%80/Linux%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%85%A5%E9%97%A8/"/>
    <id>https://www.demon-w.com/2018/01/01/Linux%E5%9F%BA%E7%A1%80/Linux%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%85%A5%E9%97%A8/</id>
    <published>2018-01-01T05:00:22.000Z</published>
    <updated>2020-08-13T17:18:21.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shell-初步认识"><a href="#Shell-初步认识" class="headerlink" title="Shell 初步认识"></a>Shell 初步认识</h2><h3 id="什么是-Shell？"><a href="#什么是-Shell？" class="headerlink" title="什么是 Shell？"></a>什么是 Shell？</h3><blockquote><p>Shell是一个命令解释器，它在操作系统的最外层，负责用户程序与内核进行交互操作的一种接口，将用户输入的命令翻译给操作系统，并将处理后的结果输出至屏幕。当我们使用远程连接工具连接Linux服务，系统则会给打开一个默认的shell，我们可在这个界面执行命令，比如：获取系统当前时间，创建一个用户等等。。。</p></blockquote><h3 id="Bash-Shell-能干什么？"><a href="#Bash-Shell-能干什么？" class="headerlink" title="Bash Shell 能干什么？"></a>Bash Shell 能干什么？</h3><blockquote><p>使用Shell实现对Linux 系统的大部分管理</p></blockquote><ol><li>文件管理</li><li>权限管理</li><li>用户管理</li><li>磁盘管理</li><li>网络管理</li><li>软件管理</li><li>。。。</li></ol><h3 id="平时我们如何使用Shell呢？"><a href="#平时我们如何使用Shell呢？" class="headerlink" title="平时我们如何使用Shell呢？"></a>平时我们如何使用Shell呢？</h3><ol><li>输入命令 –&gt; 效率低 –&gt;适合少量的工作</li><li>Shell Script –&gt; 效率高–&gt;适合复杂重复性的工作，例如:创建100个用户，单纯输入命令需要执行100次，而Shell脚本只需要几行命令即可完成100个用户的创建</li></ol><h2 id="Shell提示符"><a href="#Shell提示符" class="headerlink" title="Shell提示符"></a>Shell提示符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@demo ~]<span class="comment"># whoami   #代表root用户(超级管理员)</span></span><br><span class="line">root</span><br><span class="line">[root@demo ~]$ whoami   $代表普通用户</span><br><span class="line">jack</span><br></pre></td></tr></table></figure><h2 id="Shell基础语法"><a href="#Shell基础语法" class="headerlink" title="Shell基础语法"></a>Shell基础语法</h2><blockquote><p>命令行bash shell，为用户提供输入， 执行命令的界面</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [-options] [arguments]</span><br><span class="line"><span class="comment">#命令    选项        参数</span></span><br><span class="line"></span><br><span class="line">[root@demo ~]<span class="comment"># ls             #命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls -a          #命令+选项</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls -a /home/   #命令+选项+参数</span></span><br><span class="line"></span><br><span class="line">命令: 整条shell命令的主体</span><br><span class="line">选项: 用于调节命令的具体功能</span><br><span class="line">   以 <span class="string">&quot;-&quot;</span> 引导短格式选项(单个字符)，例如 <span class="string">&quot;-a&quot;</span></span><br><span class="line">   以 <span class="string">&quot;--&quot;</span> 引导长格式选项(多个字符)，例如 <span class="string">&quot;--color&quot;</span></span><br><span class="line">   多个短格式选项可以写在一起，只用一个 <span class="string">&quot;-&quot;</span> 引导，例如 <span class="string">&quot;-al&quot;</span></span><br><span class="line">参数: 命令操作的对象，如文件、目录名等</span><br></pre></td></tr></table></figure><div class="note danger">            <p>命令必须写在前，选项和参数位置可以发生变化</p>          </div><h2 id="Bash-Shell基本特性"><a href="#Bash-Shell基本特性" class="headerlink" title="Bash Shell基本特性"></a>Bash Shell基本特性</h2><h3 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h3><blockquote><p>当使用windows查找一个目录层级特别多的文件时，打开的效率会非常的慢，但如果使用linux查找一个目录层级特别多的文件时，可以通过tab键快速的补全</p></blockquote><div class="note success">            <p>tab键可以实现命令补全，路径补全，在实际生产中tab补全往往是我们使用的最多的, 因为可以减少执行命令以及路径出错率。</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看ip时忘记具体了命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># ifcon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按下tab键会自动补全</span></span><br><span class="line">[root@demo ~]<span class="comment"># ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按一下tab键没有反应, 按两下tab键列出所有if开头的命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># if</span></span><br><span class="line"><span class="keyword">if</span>         ifconfig   ifenslave  ifrename</span><br><span class="line">ifcfg      ifdown     ifnames    ifup</span><br><span class="line"></span><br><span class="line"><span class="comment">#linux目录较深，经常使用tab键进行补全, 如果路径出错是没有办法补全</span></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># ls /etc/sysconfig/network-scripts/</span></span><br></pre></td></tr></table></figure><h3 id="命令快捷键"><a href="#命令快捷键" class="headerlink" title="命令快捷键"></a>命令快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + a    <span class="comment">#光标跳转至正在输入的命令行的首部</span></span><br><span class="line">Ctrl + e    <span class="comment">#光标跳转至正在输入的命令行的尾部</span></span><br><span class="line">Ctrl + c    <span class="comment">#终止前台运行的程序</span></span><br><span class="line">Ctrl + d    <span class="comment">#在shell中，ctrl-d表示推出当前shell。</span></span><br><span class="line">Ctrl + z    <span class="comment">#将任务暂停，挂至后台</span></span><br><span class="line">Ctrl + l    <span class="comment">#清屏，和clear命令等效。</span></span><br><span class="line">Ctrl + k    <span class="comment">#删除从光标到行末的所有字符</span></span><br><span class="line">Ctrl + u    <span class="comment">#删除从光标到行首的所有字符</span></span><br><span class="line">Ctrl + r    <span class="comment">#搜索历史命令, 利用关键字</span></span><br></pre></td></tr></table></figure><div class="note danger">            <p>在命令行前加面加 “#” 则该命令不会被执行</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@demo ~]<span class="comment"># #ls</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="历史命令History"><a href="#历史命令History" class="headerlink" title="历史命令History"></a>历史命令History</h3><blockquote><p>用于显示历史记录和执行过的指令命令，history命令读取历史命令文件中的目录到历史命令缓冲区和将历史命令缓冲区中的目录写入命令文件。该命令单独使用时，仅显示历史命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="built_in">history</span> (选项) (参数)</span><br><span class="line">-w 保存命令历史到历史文件</span><br><span class="line">-c 清空命令历史记录, 不会清空文件</span><br><span class="line">-d 删除命令历史的第 N 条行</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.使用双 !! 可执行上一条执行过的命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls</span></span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">[root@demo ~]<span class="comment"># !!</span></span><br><span class="line">ls</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.输入!6, 执行history命令历史中第 6 行命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># !6</span></span><br><span class="line">touch 1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.使用!cat, 调用history命令历史最近一次执行过的cat命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">[root@demo ~]<span class="comment"># !cat</span></span><br><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.小技巧:</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls /etc/passwd</span></span><br><span class="line"><span class="comment">#调用上一条命令的最后参数或选项, 按下ESC松开, 然后按下 &quot;.&quot;</span></span><br><span class="line">[root@demo ~]<span class="comment"># cat</span></span><br><span class="line">[root@demo ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"><span class="comment">#第二种方式, 输入!$</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls !$</span></span><br><span class="line">ls /etc/passwd</span><br><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure><h4 id="历史命令生产实践"><a href="#历史命令生产实践" class="headerlink" title="历史命令生产实践"></a>历史命令生产实践</h4><blockquote><p>显示执行历史记录时间:<br>1、默认情况下，history并不记录命令的执行时间，分析起来很困难。可以使用HISTTIMEFORMAT在历史中显示TIMESTAMP。<br>2、将export HISTTIMEFORMAT=”%F %T “ 变量加入到~/.bashrc中即可在登录后自动开启history时间戳了。添加完成后，执行source ~/.bashrc 让其生效。仅针对当前账号有效。<br>3、其实HISTTIMEFORMAT的格式就是 strftime函数的格式，比如上面的 “%F %T “，%F表示显示出Y-M-D格式的日期，%T表示显示出H-M-S这样格式的时间。<br>4、用Ctrl+R搜索历史命令；当执行了一串相当长的命令之后，用关键字搜索一下历史命令然后重新执行这条命令而不需要将整条命令再输一遍。方法是：按下Ctrl+R然后输入关键字。如搜索 ”date”，则显示历史的命令中含有 ”date” 的命令 date “+今天是:%F,%A,时间是:%T.准备吃饭去”。按回车，就可以重新执行这条命令了，而按左箭头键或右箭头键则可以直接修改，改完之后按回车执行，非常方便！<br><mark>【注：在命令行提示符下按下Ctrl+R，终端将显示如下提示】</mark><br><code>[root@hd1b-91-16 ~]#</code><br><code>(reverse-i-search)</code>‘: `</p><p>#配置HISTTIMEFORMAT环境变量，给history记录添加上时间戳，效果是临时的<br><code>[root@demo ~]# export HISTTIMEFORMAT=&quot;%F %T &quot; #配置HISTTIMEFORMAT环境变量，给history记录添加上时间戳</code><br>#当我们再次执行history命令时，就会有时间戳<br><code>[root@demo ~]# export HISTTIMEFORMAT=&quot;%F %T &quot;</code><br> <code>1  2020-08-14 00:15:39 ping baidu.com</code><br> <code>2  2020-08-13 22:32:58 ls -al</code><br> <code>3  2020-08-13 22:57:16 ls</code></p></blockquote><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><blockquote><p>命令别名将用户经常使用的复杂命令简单化，可以用：”alias 别名名称=命令” 命令创建属于自己的命令别名, 若要取消一个命令别名，则使用：”unalias 别名名称命令”</p><p>1.定义临时别名, wk为查看eth0网卡别名<br><code>[root@demo ~]# alias wk=&#39;ifconfig&#39;</code><br><code>[root@demo ~]# wk</code></p><p>2.如果定义命令本身, 会执行什么?<br><code>[root@demo ~]# alias ifconfig=&#39;ifconfig eth0&#39;</code><br>   #会以绝对路径执行, 调用命令本身<br>   <code>[root@xuliangwei ~]# /sbin/ifconfig</code><br>   #通过\转义字符, 调用命令本身<br>   <code>[root@WebServer ~]# \ifconfig</code></p><p>3.取消别名<br><code>[root@demo ~]# unalias ifconfig</code></p><p>4.永久生效，/etc/bashrc<br><code>[root@demo ~]# echo &quot;alias ifconfig=&#39;ifconfig eth0&#39;&quot; &gt;&gt; /etc/bashrc</code></p></blockquote><h3 id="Bash-Shell获取帮助"><a href="#Bash-Shell获取帮助" class="headerlink" title="Bash Shell获取帮助"></a>Bash Shell获取帮助</h3><blockquote><p>1.help帮助<br>用法：命令 - -help</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@demo ~]<span class="comment"># ls --help</span></span><br><span class="line">用法: ls [选项]...[文件]...</span><br><span class="line"></span><br><span class="line"><span class="comment">#ls 常见选项</span></span><br><span class="line">-a  <span class="comment">#查看目录下的所有文件，包括隐藏文件</span></span><br><span class="line">-l  <span class="comment">#以长格式的方式显示文件的详细内容</span></span><br><span class="line">-h  <span class="comment">#以人性化的方式显示内容，配合-l使用</span></span><br><span class="line">-d  <span class="comment">#只列出目录名，不列出目录以下的内容</span></span><br><span class="line">-t  <span class="comment">#按修改时间进行排序</span></span><br><span class="line">-i  <span class="comment">#显示文件的inode(该文件在该分区的一个编号)</span></span><br><span class="line"></span><br><span class="line">[root@demo ~]<span class="comment"># date --help</span></span><br><span class="line">Usage: date [OPTION]... [+FORMAT]</span><br><span class="line">  or:  date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line">  </span><br><span class="line">[root@demo ~]<span class="comment"># date +%F   #查看日期</span></span><br><span class="line">2019-03-28</span><br><span class="line">[root@demo ~]<span class="comment"># date -s 12:00  #修改时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间不是用来查看，而是有其他的用途</span></span><br><span class="line">[root@demo ~]<span class="comment"># touch `date +%F`_file.txt</span></span><br><span class="line">[root@demo ~]<span class="comment"># ls</span></span><br><span class="line">2018-01-01_file.txt</span><br></pre></td></tr></table></figure><blockquote><p>2.man手册</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@demo ~]<span class="comment"># man ls    #查看ls命令的手册</span></span><br></pre></td></tr></table></figure><blockquote><p>3.通过百度寻找帮助</p></blockquote><h2 id="Bash-Shell命令流程"><a href="#Bash-Shell命令流程" class="headerlink" title="Bash Shell命令流程"></a>Bash Shell命令流程</h2><blockquote><p>当我们执行一个命令, 整个命令执行流程如下:</p><ol><li>判断命令是否通过绝对路径执行</li><li>判断命令是否存在alias别名</li><li>判断用户输入的是内部命令还是外部命</li><li>Bash内部命令直接执行，外部命令检测是否存在缓存</li><li>通过PATH路径查找命令，有执行，无报错</li></ol></blockquote><h3 id="什么是内部命令，什么是外部命令"><a href="#什么是内部命令，什么是外部命令" class="headerlink" title="什么是内部命令，什么是外部命令"></a>什么是内部命令，什么是外部命令</h3><blockquote><p>内部命令: shell程序自带的命令。<br>外部命令: 在系统PATH变量的某个路径下的可执行程序。</p></blockquote><h3 id="如何检查用户输入的命令是内部命令还是外部命令"><a href="#如何检查用户输入的命令是内部命令还是外部命令" class="headerlink" title="如何检查用户输入的命令是内部命令还是外部命令"></a>如何检查用户输入的命令是内部命令还是外部命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@demo ~]<span class="comment"># type -a cd</span></span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">cd</span> is /usr/bin/<span class="built_in">cd</span></span><br><span class="line"><span class="comment">#cd命令属于shell内部命令</span></span><br><span class="line"></span><br><span class="line">[root@xuliangwei ~]<span class="comment"># type -a  ping</span></span><br><span class="line">ping is /bin/ping</span><br><span class="line"><span class="comment">#ping属于外部命令, 同时会打印当前命令路径</span></span><br></pre></td></tr></table></figure><h3 id="如果是外置命令，Bash可以通过查找PATH变量，获取该命令的绝对路径。"><a href="#如果是外置命令，Bash可以通过查找PATH变量，获取该命令的绝对路径。" class="headerlink" title="如果是外置命令，Bash可以通过查找PATH变量，获取该命令的绝对路径。"></a>如果是外置命令，Bash可以通过查找PATH变量，获取该命令的绝对路径。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印当前环境变量目录</span></span><br><span class="line">[root@demo ~]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><blockquote><p><mark>【PATH由多个路径组成，每个路径值之间用冒号间隔，对这些路径的增加和删除操作都将影响到Bash解释器对Linux命令的查找】</mark></p></blockquote><h3 id="如果是外置命令还会涉及到一个内存缓存，也就是说，当我们出现重复执行相同的命令，会通过缓存调取执行，也就意味着不会搜索PATH路径。"><a href="#如果是外置命令还会涉及到一个内存缓存，也就是说，当我们出现重复执行相同的命令，会通过缓存调取执行，也就意味着不会搜索PATH路径。" class="headerlink" title="如果是外置命令还会涉及到一个内存缓存，也就是说，当我们出现重复执行相同的命令，会通过缓存调取执行，也就意味着不会搜索PATH路径。"></a>如果是外置命令还会涉及到一个内存缓存，也就是说，当我们出现重复执行相同的命令，会通过缓存调取执行，也就意味着不会搜索PATH路径。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表缓存命令所在位置</span></span><br><span class="line">[root@demo ~]<span class="comment"># hash</span></span><br><span class="line">hits    <span class="built_in">command</span></span><br><span class="line">   1    /usr/bin/tty</span><br><span class="line">   3    /sbin/ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment">#已缓存命令,如果移动位置会导致无法找到该命令</span></span><br><span class="line">[root@demo ~]<span class="comment"># mv /sbin/ifconfig /bin/</span></span><br><span class="line">[root@demo ~]<span class="comment"># ifconfig</span></span><br><span class="line">-bash: /sbin/ifconfig: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除缓存过的ifconfig命令, 即可执行</span></span><br><span class="line">[root@demo ~]<span class="comment"># hash -d ifconfig</span></span><br><span class="line">[root@demo ~]<span class="comment"># ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当然可以清空缓存表</span></span><br><span class="line">[root@demo ~]<span class="comment"># hash -r</span></span><br></pre></td></tr></table></figure><div class="note danger">            <p>注意: 命令缓存hash需要注意如下情况:<br>1.只要执行外部命令1次就会对该命令进行缓存<br>2.如果将命令移动了位置，该如何执行:<br> a. 使用绝对路径执行<br> b. 删除hash表的缓存指令</p>          </div><h3 id="命令执行流程总结-当我们执行了一个ping命令之后-整个命令执行的流程步骤如下"><a href="#命令执行流程总结-当我们执行了一个ping命令之后-整个命令执行的流程步骤如下" class="headerlink" title="命令执行流程总结: 当我们执行了一个ping命令之后, 整个命令执行的流程步骤如下:"></a>命令执行流程总结: 当我们执行了一个ping命令之后, 整个命令执行的流程步骤如下:</h3><blockquote><ol><li>检查执行的命令是否使用的是绝对路径执行的。</li><li>检查ping命令是否存在alias别名</li><li>检查ping命令是内部命令还是外部命令</li><li>如果是内部命令Bash直接执行，如果是外部命令，首先检查Hash缓存，存在则直接调取</li><li>如果该命令不存在Hash缓存，则通过PATH路径进行逐行查找该命令所在的位置</li><li>如果PATH路径没有查找到该命令所在的路径，则返回错误码：command not found</li></ol></blockquote>]]></content>
    
    
    <summary type="html">Linux 系统命令行入门</summary>
    
    
    
    <category term="Linux基础" scheme="https://www.demon-w.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux基础" scheme="https://www.demon-w.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
